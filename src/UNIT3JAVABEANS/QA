1. What is Java bean?
A Java Bean is a reusable software component that follows certain conventions,
 including having a no-argument constructor, properties accessed via getter and
 setter methods, and being serializable.

2. Advantages of Java Beans
JavaBeans provide a standard way to encapsulate objects, allowing them to be manipulated programmatically and visually in development tools. They support properties, event handling, and persistence.
Reusing Person bean in different contexts like GUI applications or web services.

3. Introspection
Introspection is the process of analyzing a bean to determine its
properties, methods, and events.
 The Introspector class in the java.beans package is used for this purpose.

4. Properties, Events, and Methods Design Patterns
JavaBeans can have properties (attributes), methods (operations),
 and events (notifications). Code Example shows a bean with property change support,
allowing it to notify listeners when a property changes.

5. Using BeanInfo Interface
The BeanInfo interface provides explicit information about a
 bean's properties, events, and methods,
 allowing customization of how beans are presented to development tools.

5. Bound and Constrained Properties
Bound properties notify listeners of changes,
while constrained properties allow listeners to veto changes.
This example demonstrates both concepts.

Bound Properties
Bound properties notify listeners when their values change. When a property's value changes, the bean sends a notification to all registered listeners, allowing them to react to the change.

Constrained Properties
Constrained properties allow listeners to veto changes to the property's value. When a change is about to occur,
the bean first notifies the listeners, giving them a chance to reject (veto) the change if necessary.

6. Persistence
Persistence allows saving the state of a JavaBean to a storage medium and later restoring it.
The XMLEncoder and XMLDecoder classes provide a simple way to serialize and deserialize JavaBeans to and from XML.

7. Customizers
Customizers allow the customization of a JavaBean using a GUI.
They provide a visual interface for configuring bean properties.
Each customizer should inherit from the java. awt./swing.
Component class so it can be instantiated inside an panel

8. The Java Beans API
The JavaBeans API provides various classes and
 interfaces for defining and manipulating beans,
 including support for properties, events, and persistence.

9. What is a Bean Design Pattern?
   A bean design pattern is a set of conventions used in JavaBeans to structure and manage data. It's a standard way to create reusable components that can be easily manipulated by tools and other applications. The primary goal is to make objects introspectable, meaning their properties, methods, and events can be examined and modified at runtime without knowing their internal structure.

   Property Design Patterns
   There are several property design patterns used in JavaBeans:

   1. Simple Property Design Pattern
   Definition: A simple property represents a single value associated with a bean. It's accessed through getter and setter methods.
   Example:
   Java
   public class Person {
       private String name;

       public String getName() {
           return name;
       }

       public void setName(String name) {
           this.name = name;  

       }
   }
   Use code with caution.

   In this example, name is a simple property with a getter (getName) and setter (setName) method.
   2. Boolean Property Design Pattern
   Definition: A boolean property represents a true or false value. Often, the getter method is named is followed by the property name.
   Example:
   Java
   public class Employee {
       private boolean isManager;

       public boolean isManager() {
           return isManager;
       }

       public void setManager(boolean isManager) {
           this.isManager = isManager;  

       }
   }
   Use code with caution.

   Here, isManager is a boolean property with the getter isManager().
   3. Indexed Property Design Pattern
   Definition: An indexed property represents a collection of values that can be accessed by an index. It's typically implemented using arrays or lists.
   Example:
   Java
   public class AddressBook {
       private String[] addresses;

       public String getAddress(int index) {
           return addresses[index];
       }

       public void setAddress(int index, String address) {
           addresses[index] = address;
       }
   }
   Use code with caution.

   In this case, addresses is an indexed property where individual addresses can be accessed and modified using their index.
   Key Points:

   These patterns promote consistency and ease of use for tools interacting with beans.
   They enable introspection, allowing tools to examine and manipulate bean properties without detailed knowledge of the bean's implementation.
   Proper use of these patterns enhances code readability and maintainability.
   By adhering to these design patterns, you can create well-structured JavaBeans that are easily integrated into various applications and development environments.
